*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="tablebuilder.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS tablebuilder AS baseform OF "base.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lstTables" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboKeyCol" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblKeyCol" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPostUpsize" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtPostUpsize" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetTables" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstRelations" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboParentKey" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblParentKey" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboChildKey" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Baselabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNullable" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRelations" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAddRelation" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboChild" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblChild" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: capppath		&& The path the form is running from
		*p: cfolder		&& The folder for the free tables to upsize
		*p: ncount		&& The number of tables
	*</DefinedPropArrayMethod>

	capppath = 		&& The path the form is running from
	Caption = "Upsize Tables Builder"
	cfolder = 		&& The folder for the free tables to upsize
	DataSession = 2
	DoCreate = .T.
	Height = 334
	Left = 0
	Name = "TABLEBUILDER"
	ncount = 0		&& The number of tables
	Top = 0
	Width = 533
	_memberdata = <VFPData>
		<memberdata name="cfolder" display="cFolder"/>
		<memberdata name="ncount" display="nCount"/>
		<memberdata name="capppath" display="cAppPath"/>
		</VFPData>
	oPersist.Left = 510
	oPersist.Name = "oPersist"
	oPersist.Top = 5

	ADD OBJECT 'Baselabel1' AS baselabel WITH ;
		Anchor = 12, ;
		Caption = "Child key", ;
		Left = 250, ;
		Name = "Baselabel1", ;
		Top = 274
		*< END OBJECT: ClassLib="base.vcx" BaseClass="label" />

	ADD OBJECT 'cboChild' AS basecombobox WITH ;
		Anchor = 12, ;
		BoundTo = .T., ;
		Height = 24, ;
		Left = 315, ;
		Name = "cboChild", ;
		Top = 210, ;
		Value = , ;
		Width = 208
		*< END OBJECT: ClassLib="base.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboChildKey' AS basecombobox WITH ;
		Anchor = 12, ;
		BoundTo = .T., ;
		Height = 24, ;
		Left = 315, ;
		Name = "cboChildKey", ;
		Top = 270, ;
		Value = , ;
		Width = 208
		*< END OBJECT: ClassLib="base.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboKeyCol' AS basecombobox WITH ;
		Anchor = 8, ;
		BoundTo = .T., ;
		Height = 24, ;
		Left = 365, ;
		Name = "cboKeyCol", ;
		Top = 40, ;
		Value = , ;
		Width = 158
		*< END OBJECT: ClassLib="base.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboParentKey' AS basecombobox WITH ;
		Anchor = 12, ;
		BoundTo = .T., ;
		Height = 24, ;
		Left = 315, ;
		Name = "cboParentKey", ;
		Top = 240, ;
		Value = , ;
		Width = 208
		*< END OBJECT: ClassLib="base.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkNullable' AS basecheckbox WITH ;
		Alignment = 0, ;
		Anchor = 12, ;
		Caption = "Nullable", ;
		Left = 250, ;
		Name = "chkNullable", ;
		Top = 300
		*< END OBJECT: ClassLib="base.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdAddRelation' AS basecommandbutton WITH ;
		Anchor = 4, ;
		Caption = "Add", ;
		Left = 10, ;
		Name = "cmdAddRelation", ;
		Top = 305
		*< END OBJECT: ClassLib="base.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdGetTables' AS basecommandbutton WITH ;
		Caption = "Get Tables", ;
		Left = 10, ;
		Name = "cmdGetTables", ;
		Top = 10
		*< END OBJECT: ClassLib="base.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtPostUpsize' AS baseeditbox WITH ;
		Anchor = 8, ;
		Height = 90, ;
		Left = 250, ;
		Name = "edtPostUpsize", ;
		Top = 90, ;
		Width = 275
		*< END OBJECT: ClassLib="base.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblChild' AS baselabel WITH ;
		Anchor = 12, ;
		Caption = "Child table", ;
		Left = 250, ;
		Name = "lblChild", ;
		Top = 214
		*< END OBJECT: ClassLib="base.vcx" BaseClass="label" />

	ADD OBJECT 'lblKeyCol' AS baselabel WITH ;
		Anchor = 8, ;
		Caption = "Primary key column", ;
		Left = 250, ;
		Name = "lblKeyCol", ;
		Top = 44
		*< END OBJECT: ClassLib="base.vcx" BaseClass="label" />

	ADD OBJECT 'lblParentKey' AS baselabel WITH ;
		Anchor = 12, ;
		Caption = "Parent key", ;
		Left = 250, ;
		Name = "lblParentKey", ;
		Top = 244
		*< END OBJECT: ClassLib="base.vcx" BaseClass="label" />

	ADD OBJECT 'lblPostUpsize' AS baselabel WITH ;
		Anchor = 8, ;
		Caption = "Post-upsize code", ;
		Left = 250, ;
		Name = "lblPostUpsize", ;
		Top = 70
		*< END OBJECT: ClassLib="base.vcx" BaseClass="label" />

	ADD OBJECT 'lblRelations' AS baselabel WITH ;
		Anchor = 4, ;
		Caption = "Relations", ;
		Left = 10, ;
		Name = "lblRelations", ;
		Top = 190
		*< END OBJECT: ClassLib="base.vcx" BaseClass="label" />

	ADD OBJECT 'lstRelations' AS baselistbox WITH ;
		Anchor = 14, ;
		BoundTo = .T., ;
		Height = 90, ;
		Left = 10, ;
		Name = "lstRelations", ;
		Top = 210, ;
		Value = , ;
		Width = 225
		*< END OBJECT: ClassLib="base.vcx" BaseClass="listbox" />

	ADD OBJECT 'lstTables' AS baselistbox WITH ;
		Anchor = 15, ;
		BoundTo = .T., ;
		Height = 140, ;
		Left = 10, ;
		Name = "lstTables", ;
		Top = 40, ;
		Value = , ;
		Width = 225
		*< END OBJECT: ClassLib="base.vcx" BaseClass="listbox" />
	
	PROCEDURE Init
		local lcDir, ;
			lnResult, ;
			loException as Exception, ;
			lcFolder
		This.MinHeight = This.Height
		This.MinWidth  = This.Width
		
		* Get the location for the metadata.
		
		if file('UpsizeTables.dbf')
			lcDir = ''
		else
			lcDir = getdir('', 'Select folder for metadata')
			if empty(lcDir)
				return .F.
			endif empty(lcDir)
			lcDir = addbs(lcDir)
		endif file('UpsizeTables.dbf')
		
		* If we already have the metadata, see if we want a new set. Otherwise, we'll
		* create it.
		
		if file(lcDir + 'UpsizeTables.dbf')
			lnResult = messagebox('Do you want to create a new set of tables?', 32 + 3, ;
				Thisform.Caption)
		else
			lnResult = 6
		endif file(lcDir + 'UpsizeTables.dbf')
		do case
			case lnResult = 2
				return .F.
			case lnResult = 6
				try
					create table (lcDir + 'UpsizeRelations') free ;
						(Parent     C(120), ;
						Child       C(120), ;
						ParentKey   C(10), ;
						ChildKey    C(10), ;
						Nullable    L)
					index on upper(Parent + Child) tag Main
					create table (lcDir + 'UpsizeTables') free ;
						(Table      C(120), ;
						KeyCol      C(10), ;
						PostUpsize  M(4))
					index on upper(Table) tag Table
				catch to loException
				endtry
			otherwise
				use (lcDir + 'UpsizeTables')    again shared order Table
				use (lcDir + 'UpsizeRelations') again shared order Main in 0
		endcase
		if not used('UpsizeTables')
			return .F.
		endif not used('UpsizeTables')
		select UpsizeTables
		count to This.nCount
		
		* Get the folder holding the source data.
		
		lcFolder = getdir('', 'Select the folder containing the free tables to upsize', 'Select Folder', 64)
		if empty(lcFolder)
			return .F.
		endif empty(lcFolder)
		
		This.cFolder = addbs(lcFolder)
		This.lstTables.Requery()
		This.lstRelations.Requery()
		
	ENDPROC

	PROCEDURE Load
		local lcPath
		dodefault()
		lcPath        = sys(16)
		This.cAppPath = addbs(justpath(substr(lcPath, at(' ', lcPath, 2))))
		set path to (This.cAppPath) additive
		
	ENDPROC

	PROCEDURE Refresh
		select UpsizeTables
		store This.nCount > 0 to This.lstTables.Enabled, ;
			This.cboKeyCol.Enabled, ;
			This.edtPostUpsize.Enabled, ;
			This.cmdAddRelation.Enabled
		This.cmdGetTables.Enabled = This.nCount = 0
		This.lstRelations.Requery()
		
	ENDPROC

	PROCEDURE cboChild.InteractiveChange
		if not empty(This.Value)
			replace Child with This.Value in UpsizeRelations
			Thisform.lstRelations.aItems[Thisform.lstRelations.ListIndex] = This.Value
			Thisform.lstRelations.Refresh()
			Thisform.cboChildKey.Enabled = .T.
			Thisform.cboChildKey.Requery()
		endif not empty(This.Value)
		dodefault()
		
	ENDPROC

	PROCEDURE cboChild.Requery
		local lcParent, ;
			lcChild, ;
			lnItems
		lcParent = UpsizeTables.Table
		lcChild  = UpsizeRelations.Child
		select Table ;
			from UpsizeTables ;
			where Table <> lcParent ;
			into array This.aItems
		lnItems = _tally
		dimension This.aItems[lnItems + 1]
		This.aItems[lnItems + 1] = ''
		dodefault()
		do case
			case lnItems = 0
				This.aItems[1] = ''
			case empty(lcChild)
				This.ListIndex = lnItems + 1
			otherwise
				This.ListIndex = ascan(This.aItems, lcChild, -1, -1, 1, 15)
		endcase
		
	ENDPROC

	PROCEDURE cboChildKey.InteractiveChange
		replace ChildKey with This.Value in UpsizeRelations
		dodefault()
		
	ENDPROC

	PROCEDURE cboChildKey.Requery
		local lcChild, ;
			lcAlias, ;
			loException, ;
			lnFields, ;
			lcKey, ;
			lnIndex
		lcChild = UpsizeRelations.Child
		lcAlias = trim(lcChild)
		if not empty(lcAlias) and not used(lcAlias)
			try
				use (Thisform.cFolder + lcAlias) again shared in 0
			catch to loException
			endtry
		endif not empty(lcAlias) ...
		if used(lcAlias)
			lnFields = afields(This.aItems, lcAlias)
			lnFields = lnFields + 1
			dimension This.aItems[lnFields, alen(This.aItems, 2)]
			This.aItems[lnFields, 1] = ''
			use in (lcAlias)
		
			lcKey = UpsizeRelations.ChildKey
			if empty(lcKey)
				lnIndex = lnFields
			else
				lnIndex = evl(ascan(This.aItems, lcKey, -1, -1, 1, 15), lnFields)
			endif empty(lcKey)
			This.ListIndex = lnIndex
		else
			dimension This.aItems[1]
			This.aItems[1] = ''
		endif used(lcAlias)
		dodefault()
		
	ENDPROC

	PROCEDURE cboKeyCol.anychange
		replace KeyCol with This.Value in UpsizeTables
		
	ENDPROC

	PROCEDURE cboParentKey.InteractiveChange
		replace ParentKey with This.Value in UpsizeRelations
		dodefault()
		
	ENDPROC

	PROCEDURE chkNullable.InteractiveChange
		replace Nullable with This.Value in UpsizeRelations
		dodefault()
		
	ENDPROC

	PROCEDURE cmdAddRelation.Click
		insert into UpsizeRelations ;
				(Parent, ParentKey) ;
			values ;
				(UpsizeTables.Table, UpsizeTables.KeyCol)
		Thisform.cboChild.Requery()
		Thisform.cboChild.ListIndex = Thisform.cboChild.ListCount
		Thisform.lstRelations.Requery()
		Thisform.lstRelations.ListIndex = Thisform.lstRelations.ListCount
		
	ENDPROC

	PROCEDURE cmdGetTables.Click
		local lcFolder, ;
			lnTables, ;
			laTables[1], ;
			lnI, ;
			lcTable
		lcFolder = getdir('', 'Select the folder containing the free tables to upsize', 'Select Folder', 64)
		if empty(lcFolder)
			return
		endif empty(lcFolder)
		
		delete all in UpsizeTables
		delete all in UpsizeRelations
		
		This.cFolder = addbs(lcFolder)
		lnTables = adir(laTables, This.cFolder + '*.dbf', '', 1)
		for lnI = 1 to lnTables
			lcTable = laTables[lnI, 1]
			insert into UpsizeTables (Table) values (juststem(lcTable))
		next lnI
		Thisform.lstTables.Requery()
		Thisform.Refresh()
		
	ENDPROC

	PROCEDURE lstRelations.anychange
		local lcChild, ;
			lcParent, ;
			lcKey, ;
			lnFields, ;
			lnIndex, ;
			lnFields, ;
			lcKey
		lcChild  = This.Value
		lcParent = UpsizeTables.Table
		
		* Display the parent key.
		
		seek upper(lcParent + lcChild) in UpsizeRelations order Main
		lcKey    = UpsizeRelations.ParentKey
		lnFields = alen(Thisform.cboParentKey.aItems, 1)
		if empty(lcKey)
			lnIndex = lnFields
		else
			lnIndex = evl(ascan(Thisform.cboParentKey.aItems, lcKey, -1, -1, 1, 15), ;
				lnFields)
		endif empty(lcKey)
		Thisform.cboParentKey.ListIndex = lnIndex
		Thisform.cboParentKey.Enabled   = .T.
		
		* Display the child table and key.
		
		Thisform.cboChild.Enabled = empty(lcChild)
		Thisform.cboChild.Requery()
		Thisform.cboChildKey.Requery()
		
		store not empty(lcChild) to Thisform.cboChildKey.Enabled, ;
			Thisform.chkNullable.Enabled
		if empty(lcChild)
			Thisform.chkNullable.Value = .F.
		else
			Thisform.chkNullable.Value = UpsizeRelations.Nullable
		endif empty(lcChild)
		
	ENDPROC

	PROCEDURE lstRelations.KeyPress
		lparameters tnKeyCode, ;
			tnShiftAltCtrl
		if tnKeyCode = 7 and messagebox('Delete this relation?', 4, Thisform.Caption) = 6
			delete in UpsizeRelations
			This.Requery()
		endif tnKeyCode = 7 ...
		
	ENDPROC

	PROCEDURE lstRelations.Refresh
		This.Enabled = Thisform.nCount > 0
		
	ENDPROC

	PROCEDURE lstRelations.Requery
		local lnItems
		dimension This.aItems[1]
		select Child ;
			from UpsizeRelations ;
			where Parent = UpsizeTables.Table ;
			into array This.aItems
		lnItems = _tally
		dodefault()
		if lnItems = 0
			This.aItems[1] = ''
			Thisform.cboParentKey.ListIndex = alen(Thisform.cboParentKey.aItems, 1)
			Thisform.cboChildKey.aItems[1]  = ''
			Thisform.chkNullable.Value      = .F.
			store .F. to Thisform.cboChild.Enabled, ;
				Thisform.cboParentKey.Enabled, ;
				Thisform.cboChildKey.Enabled, ;
				Thisform.chkNullable.Enabled
		else
			This.ListIndex = 1
		endif lnItems = 0
		
	ENDPROC

	PROCEDURE lstTables.anychange
		local lcTable, ;
			lcAlias, ;
			lnFields, ;
			lcKey, ;
			lnIndex
		lcTable = This.Value
		lcAlias = trim(lcTable)
		seek upper(lcTable) in UpsizeTables order Table
		if not used(lcAlias)
			try
				use (Thisform.cFolder + lcAlias) again shared in 0
			catch to loException
			endtry
		endif not used(lcAlias)
		if used(lcAlias)
		
		* Get the fields for the selected table.
		
			lnFields = afields(laFields, lcAlias)
			lnFields = lnFields + 1
			dimension laFields[lnFields, alen(laFields, 2)]
			laFields[lnFields, 1] = ''
			dimension Thisform.cboKeyCol.aItems[1]
			dimension Thisform.cboParentKey.aItems[1]
			acopy(laFields, Thisform.cboKeyCol.aItems)
			acopy(laFields, Thisform.cboParentKey.aItems)
			use in (lcAlias)
			Thisform.cboKeyCol.Requery()
			Thisform.cboParentKey.Requery()
			lcKey = UpsizeTables.KeyCol
			if empty(lcKey)
				lnIndex = lnFields
			else
				lnIndex = evl(ascan(Thisform.cboKeyCol.aItems, lcKey, -1, -1, 1, 15), lnFields)
			endif empty(lcKey)
			Thisform.cboKeyCol.ListIndex = lnIndex
		
		* Get the relations for the selected table.
		
			Thisform.lstRelations.Requery()
		endif used(lcAlias)
		
	ENDPROC

	PROCEDURE lstTables.KeyPress
		lparameters tnKeyCode, ;
			tnShiftAltCtrl
		if tnKeyCode = 7 and messagebox('Delete this table?', 4, Thisform.Caption) = 6
			delete in UpsizeTables
			count to Thisform.nCount
			This.Requery()
		endif tnKeyCode = 7 ...
		
	ENDPROC

	PROCEDURE lstTables.Requery
		local lnItems
		select Table ;
			from UpsizeTables ;
			into array This.aItems
		lnItems = _tally
		dodefault()
		if lnItems = 0
			This.aItems[1] = ''
		endif lnItems = 0
		This.ListIndex = 1
		
	ENDPROC

ENDDEFINE
